name: continuous-integration

on: [push, pull_request]

jobs:

  tests:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.8', '3.7']

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_${{ matrix.backend }}
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
      slurm:
        image: xenonmiddleware/slurm:17
        ports:
          - 5001:22

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install postgresql graphviz

    - name: Upgrade pip and setuptools
      # It is crucial to update `setuptools` or the installation of `pymatgen` can break
      run: |
        pip install --upgrade pip setuptools wheel
        pip --version

    - name: Install aiida-kkr
      run: |
        # install aiida-kkr with aiida-core 1.5.2 (used in the generation of the test files, to use 1.6 we need to update the test files or caching won't work)
        pip install --use-feature=2020-resolver .[testing] -r requirements_aiida-core_1.5.txt
        reentry scan
        pip freeze

    - name: Run pytest
      run: |
        cd aiida_kkr/tests/
        # fake installations of the JuKKR codes
        # and make sure kkr.x etc is found in the PATH (even necessary for the fakes)
        mkdir -p jukkr
        cd jukkr && export PATH="$PWD:$PATH"
        touch kkr.x; touch voronoi.exe; touch kkrflex.exe
        chmod +x kkr.x voronoi.exe kkrflex.exe
        cd ..
        # run all (tools, calculations, workflows) tests using caching of the results
        #RUN_ALL='yes' ./run_all.sh
        # for now KKRimp calculations do not cache properly and eos tests needs fixing
        RUN_VORONOI='t' RUN_KKRHOST='t' ./run_all.sh -v
