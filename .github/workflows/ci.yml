name: continuous-integration

on: [push, pull_request]

jobs:

  docs:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-docs-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-docs-

    - name: Install python dependencies
      run: |
        pip install -e .[docs]

    - name: Install Latex compiler
      run: |
        sudo apt-get install -y latexmk dvipng texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended

    - name: Build documentation
      env:
        READTHEDOCS: 'True'
      run: |
        SPHINXOPTS='-nW' make -C docs html


  pre-commit:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2

    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-pre-commit-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-pre-commit-

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install python dependencies
      run: |
        pip install --use-feature=2020-resolver .[pre-commit]
        pip freeze

    - name: Run pre-commit
      run: |
        pre-commit run --all-files || (git status --short; git diff ; exit 1)

    # pylint in pre-commit only checks for errors, here we check for refactoring potential, warnings etc.
    - name: Run pylint strict
      continue-on-error: true
      run: |
        pylint aiida_kkr/


  tests:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.8', '3.7']

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_${{ matrix.backend }}
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
      slurm:
        image: xenonmiddleware/slurm:17
        ports:
          - 5001:22

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install postgresql graphviz

    - name: Upgrade pip and setuptools
      # It is crucial to update `setuptools` or the installation of `pymatgen` can break
      run: |
        pip install --upgrade pip setuptools wheel
        pip --version

    - name: Install aiida-kkr
      run: |
        # install aiida-kkr with aiida-core 1.6.4 (used in the generation of the test files on iffaiida)
        pip install --use-feature=2020-resolver .[testing] -r .github/workflows/requirements_aiida-core_1.6.4.txt
        reentry scan
        pip freeze

    - name: Run pytest
      run: |
        cd aiida_kkr/tests/
        # fake installations of the JuKKR codes
        # and make sure kkr.x etc is found in the PATH (even necessary for the fakes)
        mkdir -p jukkr
        cd jukkr && export PATH="$PWD:$PATH"
        touch kkr.x; touch voronoi.exe; touch kkrflex.exe
        chmod +x kkr.x voronoi.exe kkrflex.exe
        cd ..
        # run all (tools, calculations, workflows) tests using caching of the results
        #RUN_ALL='yes' ./run_all.sh
        # for now run voronoi calculations only, the rest needs fixing
        RUN_VORONOI='t' ./run_all.sh

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: true
